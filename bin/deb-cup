#!/bin/bash

#    Deb Cup: GUI tool for creating deb packages and uploading to a PPA.
#    Copyright (C) 2017-2018  Pavel Řehák
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

version="1.0.0 UNRELEASED"


# Icons
icon=/usr/share/icons/hicolor/48x48/apps/deb-cup.png
icons=$HOME/Git/deb-cup/share/icons/hicolor/16x16/apps
icon1="$icons/deb-cup-white.png"
icon2="$icons/deb-cup-folder.png"
icon3="$icons/deb-cup-folder-open.png"
icon4="$icons/deb-cup-package-x-generic.png"
icon5="$icons/deb-cup-text-x-preview.png"
icon6="$icons/deb-cup-package-x-generic.png"
icon7="$icons/deb-cup-gcr-gnupg.png"
icon8="$icons/deb-cup-upload.png"

# Config files
#. $HOME/.config/deb-cup/deb-cup.cfg
usr_ppa_config_file=$HOME/.config/deb-cup/usr_ppa
path_recent_config_file=$HOME/.config/deb-cup/recent
fingerprint_config_file=$HOME/.config/deb-cup/fingerprint
parent_folder_config_file=$HOME/.config/deb-cup/parent
patches_folder_config_file=$HOME/.config/deb-cup/patches
log_file=/tmp/deb-cup-log
title='Deb Cup'
zenity_settings="--window-icon=$icon --width=330 --height=200"
yad_settings="--window-icon=$icon --width=400 --height=200"

####
run=1

touch $log_file


# check installed packages
if dpkg --status xed \
   >/dev/null
then
    VISUAL="xed --wait"
else
    VISUAL="gedit --wait"
fi

# Needed for dch
export VISUAL


##############################################################################
# Gettext
##############################################################################

. gettext.sh

TEXTDOMAIN=deb-cup
export TEXTDOMAIN

TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAINDIR


##############################################################################
#	FUNCTIONS
##############################################################################

main_window()
{
column_text="$(gettext Project)"
action=$(yad --list \
             --title="$title" \
             --window-icon=$icon \
             --width=270 \
             --height=405 \
             --column="" \
             --column="":IMG \
             --column="$project_name-$project_version" \
             --hide-column=1 \
             --no-click \
             --search-column=1 \
             --print-column=1 \
             --separator="" \
               e "$icon1" "$(gettext 'Settings...')" \
               f "$icon1" "$(gettext 'Set fingerprint...')" \
               p "$icon1" "$(gettext 'Set user and ppa...')" \
               o "$icon2" "$(gettext 'Choose project folder...')" \
               d "$icon3" "$(gettext 'Create/Open debian folder')" \
               i "$icon1" "$(gettext 'Import patch...')" \
               t "$icon4" "$(gettext 'Create orig tarball')" \
               c "$icon5" "$(gettext 'Increment changelog...')" \
               b "$icon6" "$(gettext 'Create deb binary')" \
               s "$icon7" "$(gettext 'Create signed dsc and changes')" \
               u "$icon8" "$(gettext 'Upload to the PPA...')" \
               h "$icon1" "$(gettext 'Help')" )
}


#	SETTING
##############################################################################

change_settings()
{
yad --form \
    --field="user/PPA":CBE \
    --field="Fingerpring":CE
}


set_fingerprint()
{
zenity_text="$(gettext 'Please open terminal (Ctrl+Alt+T) and type:
gpg --fingerprint
Copy the key fingerprint (long alphanumeric code)
which you want to use and paste it here without spaces.')"

if fingerprint=$(zenity --entry \
                        --title="$title" \
                        --text="$zenity_text" \
                        --entry-text="$(cat $fingerprint_config_file)" \
                          $zenity_settings \
                          2>/dev/null )

then
    echo $fingerprint > $fingerprint_config_file ||
        create_fingerprint_config_file
fi
}


create_fingerprint_config_file()
{
mkdir $HOME/.config/deb-cup
echo $fingerprint > $fingerprint_config_file
}


set_usr_ppa()
{
zenity_text="$(gettext 'Please set user name and name of your PPA in format:
 user/ppa')"

if user_ppa=$(zenity --entry \
                     --title="$title" \
                     --text="$zenity_text" \
                     --entry-text="$(cat $usr_ppa_config_file)" \
                       $zenity_settings \
                       2>/dev/null )
then
    echo $user_ppa > $usr_ppa_config_file ||
        create_usr_ppa_config_file
fi
}


create_usr_ppa_config_file()
{
mkdir $HOME/.config/deb-cup
echo $user_ppa > $usr_ppa_config_file
}


choose_project_folder()
{
run_from_menu="TRUE"
choose_recent
}


choose_recent()
{
# Remove duplicity
config_file=$(awk '!a[$0]++' $path_recent_config_file)

# let last 10 projects
echo "$config_file" |
    head > $path_recent_config_file

if ! [ "$config_file" = "" ]
then
    # Solution of a white space in a folder name.
    lines_count=$(echo "$config_file" |
                  wc -l )
    n=0
    while [ $n -lt $lines_count ];
    do
        recent=$(echo "$config_file" |
                 head -$(($n+1)) |
                 tail -1 )
        array[$n]="$recent"
        n=$(($n+1))
    done

    tmp="$path_project_folder"
    path_project_folder=$(yad --list \
                              --title="$title" \
                              --window-icon=$icon \
                              --width=540 \
                              --height=340 \
                              --text="$(gettext 'Recent projects')" \
                              --button="$(gettext Cancel)":1 \
                              --button="$(gettext 'New project')":2 \
                              --button="$(gettext OK)":0 \
                              --no-headers \
                              --column="" \
                              --print-column=1 \
                              --always-print-result \
                              --separator="" \
                                `# Solution of the white space.` \
                                "${array[0]}" "${array[1]}" \
                                "${array[2]}" "${array[3]}" \
                                "${array[4]}" "${array[5]}" \
                                "${array[6]}" "${array[7]}" \
                                "${array[8]}" "${array[9]}" \
                                2>/dev/null )
    status=$?
    if [ $status = 0 ]
    then
        if test -d "$path_project_folder"
        then
            get_project_details
            # add as the first line
            sed -i "1i$path_project_folder" "$path_recent_config_file"
            echo "$path_parent_folder" > "$parent_folder_config_file"
        else
            # Do not delete recent when nothig was choosen
            if ! [ "$path_project_folder" = "" ]
            then
                echo "$(grep -v "$path_project_folder" "$path_recent_config_file")" > \
                 "$path_recent_config_file"
                 unset 'array[@]'
            fi
            zenity_text="$(gettext 'Folder of the chosen project is missing.')"
            zenity_warning
        fi
    elif [ $status = 2 ]
    then
        set_project_folder
    else
        path_project_folder="$tmp"
    fi
else
    if [ "$run_from_menu" = "TRUE" ]
    then
        set_project_folder
    fi
fi
}


set_project_folder()
{
set_path_parent_folder
if path_project_folder=$(yad --file \
                             --directory \
                             --title="$(gettext 'Choose a folder with the source code')" \
                             --filename="$path_parent_folder/" \
                             --window-icon=$icon )
then
    get_project_details
    # Needed for sorting [A-Za-z]
    export LC_COLLATE=C
    # A-Z not allowed
    # $ Matches the end of a line or string.
    if [[ "$project_name_version" =~ ^[a-z0-9]+[a-z0-9+-\.]+"-"[0-9]+[a-z0-9\.+:~]*$ ]]
    then
        sed -i "1i$path_project_folder" "$path_recent_config_file" ||
            create_path_recent_config_file
        echo "$path_parent_folder" > "$parent_folder_config_file"
    else
        zenity_text="$(gettext 'Please set name and version of the folder in format
name-version, e.g. myapp-0.1.0.')"
        zenity_warning
    fi
    # Default Sorting [Aa-Zz]
    export LC_COLLATE=""
fi
}


create_path_recent_config_file()
{
mkdir $HOME/.config/deb-cup
echo "" > "$path_recent_config_file"
sed -i "1i$path_project_folder" "$path_recent_config_file"
}


set_path_parent_folder()
{
if ! path_parent_folder=$(cat $parent_folder_config_file)
then
    path_parent_folder=$HOME
fi
}


set_path_patches_folder()
{
if ! path_patches_folder=$(cat $patches_folder_config_file)
then
    path_patches_folder=$HOME
fi
}


create_cfg()
{
mkdir $HOME/.config/deb-cup
echo "" > $config_file
}


#	ACTIONS
##############################################################################

create_debian_folder()
{
base_test
if [[ $base_test_result = "OK" ]]
then
    if test -d "$path_project_folder/debian/"
    then
        xdg-open "$path_project_folder/debian/"
    else
        cd "$path_project_folder"
        dh_make --yes --indep --createorig
        touch debian/install
        yad --form \
            --title="$title" \
            --borders=10 \
            --text-align=center \
            --button="$(gettext Cancel)":1 \
            --button="$(gettext 'Open debian folder')":0 \
            --text="$(gettext 'Please edit the files in the debian folder now.')" \
            --image=dialog-information \
              $yad_settings \
              2>/dev/null
        status=$?
        if [ $status = 0 ]
        then
            xdg-open "$path_project_folder/debian/"
        fi
    fi
fi
}


import_patch()
{
base_test
if [[ $base_test_result = "OK" ]]
then
    path_debian="$path_project_folder/debian"
    if test -d "$path_debian/"
    then
        source_format=$(cat "$path_debian/source/format")
        if echo $source_format |
           grep "quilt"
        then
            format="quilt"
        else
            zenity_text="$(eval_gettext "Source format is \$source_format. For apply patches it needs to be 3.0 (quilt). Do you want to switch the source format now?")"
            if yad --form \
                   --title="$title" \
                   --borders=10 \
                   --text="$zenity_text" \
                   --image=dialog-question \
                     $yad_settings \
                     2>/dev/null

            then
                echo "3.0 (quilt)" > "$path_debian/source/format"
                format="quilt"
            fi
        fi

        if [ "$format" = "quilt" ]
        then
            set_path_patches_folder
            if path_patch=$(yad --file \
                                --title="$(gettext 'Choose patch')" \
                                --window-icon=$icon \
                                --filename="$path_patches_folder/" \
                                --file-filter="patch | *.patch" \
                                  2>/dev/null )
            then
                file_name=$(echo "${path_patch##*/}")
                if test -e "$path_debian/patches/$file_name"
                then
                    zenity_text="$(eval_gettext "File \$file_name exist. Overwrite?")"
                    if yad --form \
                           --title="$title" \
                           --borders=10 \
                           --text="$zenity_text" \
                           --text-align=center \
                           --image=dialog-question \
                             $yad_settings \
                             2>/dev/null
                    then
                        cp "$path_patch" "$path_debian/patches/"
                    fi
                else
                    mkdir "$path_debian/patches"
                    cp "$path_patch" "$path_debian/patches/"
                    echo "$file_name" >> "$path_debian/patches/series"
                fi
                path_patch=$(echo "${path_patch%/*}")
                echo "$path_patch" > "$patches_folder_config_file"
            fi
        fi
    else
        warning_create_debian_folder
    fi
fi
}


create_orig_tarball()
{
base_test
if [[ $base_test_result = "OK" ]]
then
    (
    echo "0"
    cd "$path_parent_folder"
    echo "5"
    tar -cf debian.tar $project_name_version/debian/
    echo "25"
    rm -fr $project_name_version/debian
    echo "45"
    tar -caf $project_name\_$project_version.orig.tar.xz $project_name_version
    echo "75"
    tar -xf debian.tar
    echo "90"
    rm debian.tar
    echo "100"
    ) | yad --progress \
            --title="$title" \
            --borders=10 \
            --auto-close \
            --no-escape \
            --no-buttons \
            --text="$(gettext 'Creating orig tarball...')" \
              $yad_settings \
              2>/dev/null

    notify-send "$(gettext 'Orig tarball created.')" --icon=$icon --expire-time=3000
fi
}


update_changelog()
{
base_test
if [[ $base_test_result = OK ]]
then
    if test -e "$path_project_folder/debian/changelog"
    then
        check_name
        if [[ $folder_changelog_name = same ]]
        then
            check_version
            if [[ $folder_changelog_version = same ]]
            then
                cd "$path_project_folder/debian"
                dch --controlmaint 2> $log_file
                error_message=$(cat "$log_file")
                echo $error_message |
                    grep --quiet "dch warning" &&
                    error="warning"
                echo $error_message |
                    grep --quiet "../$project_name-" &&
                    error="renamed"
                case $error in
                    warning )
                        zenity_text="$error_message"
                        zenity_warning ;;
                    renamed )
                        project_version=$(echo "$error_message" |
                                          grep "../$project_name-" |
                                          sed 's/.*-//g' )
                        path_project_folder="$path_parent_folder/$project_name-$project_version"
                        sed -i "1i$path_project_folder" "$path_recent_config_file"
                        notify-send "$(gettext 'The project folder was renumbered to') $project_name-$project_version." --icon=$icon --expire-time=3000 ;;
                esac
                error=""
            else
                repair_version
            fi
        else
            repair_name
        fi
    else
        warning_create_debian_folder
    fi
fi
}


create_deb_binary()
{
base_test
if [[ $base_test_result = OK ]]
then
    ctvn_test
    if [[ $ctvn_test_result = OK ]]
    then
        cd "$path_project_folder/debian"
        dch --release --controlmaint
        cd "$path_project_folder"
        (
        echo "0"
        yes | debuild -us -uc -tc > $log_file
        echo "100"
        ) | yad --progress \
                --title="$title" \
                --borders=10 \
                --progress-text='' \
                --pulsate \
                --auto-close \
                --no-escape \
                --no-buttons \
                --text="$(gettext 'Creating deb binary package...')" \
                  $yad_settings \
                  2>/dev/null

        # Check missing build dependencies
        build_dependencies=$(cat "$log_file" |
                             grep "Unmet build dependencies" ) &&
                             echo $?
        if [ $? -eq 0 ]
        then
            zenity_text="$(gettext 'Some build dependencies are missing. Do you want to install them now?

Dummy deb package will be created so the dependencies can be easily uninstalled.')"
            if yad --form \
                   --title="$title" \
                   --borders=10 \
                   --text="$zenity_text" \
                   --image=dialog-question \
                     $yad_settings \
                     2>/dev/null
            then
                (
                echo 0
                cd "$path_parent_folder"
                mk-build-deps $path_project_folder/debian/control
                echo 100
                ) | yad --progress \
                        --title="$title" \
                        --borders=10 \
                        --progress-text='' \
                        --pulsate \
                        --auto-close \
                        --no-escape \
                        --no-buttons \
                        --text="$(gettext 'Creating dummy package...')" \
                          $yad_settings \
                          2>/dev/null

                gdebi-gtk "$path_parent_folder"/"$project_name"-build-deps_"$project_version"*.deb
            fi

        else
            # log window
            yad --text-info \
                --title="$title" \
                --window-icon=$icon \
                --width=600 \
                --height=330 \
                --button="$(gettext 'Install')":2 \
                --button="$(gettext 'OK')":0 \
                --filename="$log_file" \
                --fontname="sans normal 11" \
                  2>/dev/null

            status=$?

            # Install the created deb package
            if [ $status = 2 ]
            then
                if answer=$(yad --file \
                                --title="$(gettext 'Choose deb file')" \
                                --window-icon=$icon \
                                --filename="$path_parent_folder/" \
                                --file-filter="deb | *.deb" \
                                  2>/dev/null )
                then
                    gdebi-gtk "$answer"
                fi
            fi
        fi
    fi
fi
}


sign_packages()
{
base_test
if [[ $base_test_result = OK ]]
then
    ctvn_test
    if [[ $ctvn_test_result = OK ]]
    then
        cd "$path_project_folder/debian"
        dch --release --controlmaint
        fingerprint=$(cat $fingerprint_config_file)
        if [ "$fingerprint" = "" ]
        then
            error=0
            sec_key="$(eval gpg --list-secret-keys)"
            gpg_version=$(dpkg --status gnupg |
                          grep ^Version |
                          sed 's/^Version: //' |
                          sed 's/-.*//' )

            # xenial
            if [[ "$gpg_version" < "1.5" ]]
            then
                sec_key=$(echo "$sec_key" |
                          sed -n '/sec /p' |
                          sed 's/.*\/\(.*\) .*/\1/' )

            # artful
            elif [[ "$gpg_version" < "2.2" ]]
            then
                sec_key=$(echo "$sec_key" |
                          sed 's/.* \(.*\) uid.*/\1/' )

            # bionic
            elif [[ "$gpg_version" > "2.2.3" ]]
            then
                sec_key=$(echo "$sec_key" |
                          head -4 |
                          tail -1 |
                          sed 's/ *//' )

            else
                error=1
            fi

            if [ "$sec_key" = "" ]
            then
                error=1
            fi

        else
            sec_key=$fingerprint
        fi

        if [ "$error" = "0" ]
        then
            cd "$path_project_folder"
            zenity_text="$(gettext 'Do you want to include orig tarball?')"
            sasd=""
            yad --form \
                --title="$title" \
                --borders=10 \
                --text="$zenity_text" \
                --text-align=center \
                --image=dialog-question \
                --button="$(gettext Cancel)":1 \
                --button="$(gettext 'No')":2 \
                --button="$(gettext 'Yes')":0 \
                  $yad_settings \
                  2>/dev/null

            status=$?

            if [ $status = 0 ]
            then
                sasd="-sa"
            elif [ $status = 2 ]
            then
                sasd="-sd"
            fi
            if [ "$sasd" != "" ]
            then
                if [[ "$gpg_version" < "1.5." ]]
                then
                    command="debuild -S $sasd -k$sec_key"
                    xterm -fa 'Monospace' \
                          -fs 10 \
                          -T 'Deb Cup' \
                          -e "bash -c \"$command; exec bash\""
                else
                    (
                    echo "0"
                    yes | debuild -S $sasd -k$sec_key >  $log_file
                    echo "100"
                    ) | yad --progress \
                            --title="$title" \
                            --borders=10 \
                            --progress-text='' \
                            --pulsate \
                            --auto-close \
                            --no-escape \
                            --no-buttons \
                            --text="$(gettext 'Creating signed dsc and changes...')" \
                              $yad_settings \
                              2>/dev/null

                    sign_packages_info
                fi
            fi
        else
            zenity_text="$(gettext 'Please set the fingerprint first.')"
            zenity_warning
        fi
    fi
fi
}


upload_file()
{
# Check whether an user and a ppa is set
user_ppa="$(cat $usr_ppa_config_file)"
if [ "$user_ppa" = "" ]
then
    zenity_text="$(gettext 'Please set the user and the ppa first.')"
    zenity_warning
else
    # Choose source.changes file
    set_path_parent_folder
    if path_changes_file=$(yad --file \
                               --title="$(gettext 'Choose source.changes file')" \
                               --window-icon=$icon \
                               --filename="$path_parent_folder/" \
                               --file-filter="source.changes | *source.changes" \
                                 2>/dev/null )
    then
        # Print the part of the string after last "/"
        file_name=$(echo "${path_changes_file##*/}")
        zenity_text="$(eval_gettext "Do you want to upload
\$file_name
to \$user_ppa?")"

        if yad --form \
               --title="$title" \
               --borders=10 \
               --text="$zenity_text" \
               --image=dialog-question \
                 $yad_settings \
                 2>/dev/null

        then
            # Upload changes and the source code to the PPA
            (
            echo "0"
            dput ppa:$user_ppa $path_changes_file > $log_file
            echo "100"
            ) | yad --progress \
                    --title="$title" \
                    --borders=10 \
                    --progress-text='' \
                    --pulsate \
                    --auto-close \
                    --no-escape \
                    --no-buttons \
                    --text="$(gettext 'Uploading files to the PPA...')" \
                      $yad_settings \
                      2>/dev/null

            yad --text-info \
                --title="$title" \
                --filename="$log_file" \
                --fontname="sans normal 11" \
                --button="$(gettext 'OK')":0 \
                --window-icon=$icon \
                --width=600 \
                --height=330 \
                  2>/dev/null
        fi
    fi
fi
}


open_help()
{
# Read compressed text file.
zmore /usr/share/doc/deb-cup/help >$log_file
yad --html \
       --title="$title - $(gettext Help)" \
       --window-icon=$icon \
       --width=700 \
       --height=500 \
       --uri="$log_file" \
       --button="$(gettext 'OK')"
}


#	INFO
##############################################################################

sign_packages_info()
{
yad --text-info \
    --title="$title" \
    --window-icon=$icon \
    --width=600 \
    --height=330 \
    --filename="$log_file" \
    --fontname="sans normal 11" \
    --button="$(gettext 'OK')":0 \
      2>/dev/null

check_release
if [ "$changelog_release" = "UNRELEASED" ]
then
    zenity_text="$(gettext 'The dsc and changes files was not signed because a release in the changelog file is UNRELEASED. If you want signed dsc and changes please save the changelog file, which was automatically opened, before closing.')"
    zenity_warning
fi
}


#	CHECK
##############################################################################

get_project_details()
{
path_parent_folder=$(echo "${path_project_folder%/*}")
project_name_version=$(echo "${path_project_folder##*/}")
project_name=$(echo "${project_name_version%-*}")
project_version=$(echo "${path_project_folder##*-}")
}


check_name()
{
changelog_name=$(head -1 "$path_project_folder/debian/changelog" |
                 sed 's/\(.*\) (.*/\1/')
if [ $changelog_name = $project_name ]
then
    folder_changelog_name="same"
else
    folder_changelog_name="different"
fi
}


check_version()
{
changelog_version=$(head -1 "$path_project_folder/debian/changelog" |
                    sed 's/.*(\([a-z0-9\.+:~]\+\).*/\1/g' |
                    sed 's/.*://g' )

if [ $changelog_version = $project_version ]
then
    folder_changelog_version="same"
else
    folder_changelog_version="different"
fi
}


check_release()
{
changelog_release=$(head -1 "$path_project_folder/debian/changelog" |
                    sed 's/.*\(UNRELEASED\).*/\1/' )
}


base_test()
{
base_test_result="OK"
get_project_details

# Check whether the folder name or version was not changed
if ! test -d "$path_project_folder"
then
    base_test_result="FALSE"
fi

# Check whether a project folder is set
if ! [[ $project_name_version = *"-"[0-9a-z]* ]]
then
    base_test_result="FALSE"
fi

if [ "$base_test_result" = "FALSE" ]
then
    warning_set_project_folder
fi
}


ctvn_test()
{
ctvn_test_result="FALSE"
    # Check whether changelog file exist
    if test -e "$path_project_folder/debian/changelog"
    then
        # Check whether orig tarball exist
        if test -e "$path_parent_folder"/"$project_name"\_"$project_version".orig.tar.* \
              >/dev/null
        then
            # Check wheter the version of the project folder and the version
            # in the changelog file are the same
            check_version
            check_name
            if [[ $folder_changelog_version = same &&
                 $folder_changelog_name = same ]]
            then
                ctvn_test_result="OK"
            else
                warning_name_version_mishmash
            fi
        else
            warning_create_orig_tarball
        fi
    else
        warning_create_debian_folder
    fi
}


#	WARNINGS
##############################################################################

yad_warning_dialog()
{
yad --form \
    --title="$title" \
    --borders=10 \
    --button="$(gettext 'OK')" \
    --text="$zenity_text" \
    --text-align=center \
    --image=dialog-warning \
      $yad_settings \
      2>/dev/null
}

warning_set_project_folder()
{
zenity_text="$(gettext 'Please choose a project folder first.')"
yad_warning_dialog
}


warning_create_debian_folder()
{
zenity_text="$(gettext 'Please create a debian folder first.')"
yad_warning_dialog
}


warning_create_orig_tarball()
{
zenity_text="$(gettext 'Please create the orig tarball first.')"
yad_warning_dialog
}


warning_name_version_mishmash()
{
zenity_text="$(gettext 'Please increase changelog first.')"
yad_warning_dialog
}


zenity_warning()
{
yad_warning_dialog
}


#    TOOLS
##############################################################################

move_project_folder()
# used by repair_version and repair_name
{
if mv -T "$path_project_folder" "$new_path_project_folder" 2>$log_file
then
    sed -i "1i$new_path_project_folder" "$path_recent_config_file"
    path_project_folder=$new_path_project_folder
    get_project_details
    notify-send "$notify_text" --icon=$icon --expire-time=3000
else
    zenity_text=$(cat $log_file)
    zenity_warning
fi
}

repair_name()
{
zenity_text="$(gettext 'The name of the project folder and the name in the changelog file are not the same. Please rename the project folder or update the changelog.')

$(gettext 'Folder name'): $project_name
$(gettext 'Changelog name'): $changelog_name"

yad --form \
    --title="$title" \
    --borders=10 \
    --text="$zenity_text" \
    --image=dialog-question \
    --button="$(gettext Cancel)":1 \
    --button="$(gettext 'Rename')":2 \
    --button="$(gettext 'Open changelog')":0 \
      $yad_settings \
      2>/dev/null

status=$?

if [ $status = 0 ]
then
    cd "$path_project_folder/debian"
    dch --edit --check-dirname-regex $project_name_version

elif [ $status = 2 ]
then
    new_path_project_folder="$path_parent_folder/$changelog_name-$project_version"
    notify_text="$(gettext 'The project folder was renamed to') $changelog_name-$project_version."
    # used by repair_version too
    move_project_folder
fi
}


repair_version()
{
zenity_text="$(gettext 'The version of the project folder and the version in the changelog file are not the same. Please renumber the project folder or update the changelog.')

$(gettext 'Folder version'): $project_version
$(gettext 'Changelog version'): $changelog_version"

yad --form \
    --title="$title" \
    --borders=10 \
    --text="$zenity_text" \
    --image=dialog-question \
    --button="$(gettext Cancel)":1 \
    --button="$(gettext 'Renumber')":2 \
    --button="$(gettext 'Open changelog')":0 \
      $yad_settings \
      2>/dev/null

status=$?

if [ $status = 0 ]
then
    cd "$path_project_folder/debian"
    dch --controlmaint

elif [ $status = 2 ]
then
    new_path_project_folder="$path_parent_folder/$project_name-$changelog_version"
    notify_text="$(gettext 'The project folder was renumbered to') $project_name-$changelog_version."
    # used by repair_name too
    move_project_folder
fi
}


##############################################################################
#    PROGRAM
##############################################################################


#    PARAMETERS
##############################################################################
while [ $# -gt 0 ]
do
    case "$1" in
        --version | -v )
            echo "deb-cup version $version"
            exit
            ;;

        --help | -h )
            echo "$title - GUI tool for creating deb packages and uploading to a PPA"
            echo " "
            echo "usage: deb-cup [option]"
            echo " "
            echo "options:"
            echo "  -h, --help                show this help"
            echo "  -v, --version             print version number"
            exit
            ;;
    esac
    shift
done


##############################################################################

choose_recent


##############################################################################

while [ "$run" = 1 ]
do

main_window

if [ "$action" = "i" ]
then
    import_patch

elif [ "$action" = "t" ]
then
    create_orig_tarball

elif [ "$action" = "c" ]
then
    update_changelog

elif [ "$action" = "b" ]
then
    create_deb_binary

elif [ "$action" = "s" ]
then
    sign_packages

elif [ "$action" = "u" ]
then
    upload_file

elif [ "$action" = "d" ]
then
    create_debian_folder

elif [ "$action" = "p" ]
then
    set_usr_ppa

elif [ "$action" = "o" ]
then
    choose_project_folder

elif [ "$action" = "h" ]
then
    open_help

elif [ "$action" = "f" ]
then
    set_fingerprint

elif [ "$action" = "e" ]
then
    change_settings

else
    run=0
fi

done

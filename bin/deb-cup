#!/bin/bash

#    Deb Cup: GUI tool for creating deb packages and uploading to a PPA.
#    Copyright (C) 2017-2018  Pavel Řehák
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

version=0.8.0


#. $HOME/.config/deb-cup/deb-cup.cfg
usr_ppa_config_file=$HOME/.config/deb-cup/usr_ppa
path_config_file=$HOME/.config/deb-cup/recent
fingerprint_config_file=$HOME/.config/deb-cup/fingerprint
parent_folder_config_file=$HOME/.config/deb-cup/parent
log_file=/tmp/deb-cup-log
icon=/usr/share/icons/hicolor/48x48/apps/deb-cup.png
title='Deb Cup'
zenity_settings="--window-icon=$icon --width=330 --height=200"

run=1

touch $log_file

release=$(eval lsb_release -cs)
if  [[ $release = sylvia ||
       $release = sonya  ||
       $release = serena ||
       $release = sarah ]]
then
    release=xenial
fi

# check editors and set the installed one
if dpkg --status xed
then
    VISUAL="xed --wait"
else
    VISUAL="gedit --wait"
fi

# Needed for dch
export VISUAL


##############################################################################
# Gettext
##############################################################################

. gettext.sh

TEXTDOMAIN=deb-cup
export TEXTDOMAIN

TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAINDIR


##############################################################################
#	FUNCTIONS
##############################################################################

main_window()
{
action=$(zenity --list --title="$title" \
                --window-icon=$icon --width=270 --height=405 \
                 --text "" \
                --column "" --column "" --column "Project:    $project_name-$project_version" \
                --hide-column=1,2 --print-column=2 \
                f fingerprint "$(gettext 'Set fingerprint...')" \
                p usr_ppa "$(gettext 'Set user and ppa...')" \
                o path "$(gettext 'Choose project folder...')" \
                d debian "$(gettext 'Create/Open debian folder')" \
                t tarball "$(gettext 'Create orig tarball')" \
                c changelog "$(gettext 'Increment changelog...')" \
                b binary "$(gettext 'Create deb binary')" \
                s sign "$(gettext 'Create signed dsc and changes')" \
                u upload "$(gettext 'Upload to the PPA...')" \
                h doc-help "$(gettext 'Help')" \
                a about "$(gettext 'About')")
}


#	SETTING
##############################################################################


choose_recent()
{
# tac = read file backwards
recent="$(cat $path_config_file | tac)"
if ! [ "$recent" = "" ]
then
    set_path_parent_folder
    button_text=$(gettext "New project")
    if path_project_folder=$(zenity --list \
                                    --title="$title" \
                                    --hide-header \
                                    --text="$(gettext 'Choose a project')" \
                                    --extra-button="$button_text" \
                                    --column "" \
                                    --print-column=1 \
                                      $zenity_settings \
                                      $recent )
    then
        if ls $path_project_folder
        then
            get_project_details
        else
            zenity_text="$(gettext 'Folder of the choosen project is missing.')"
            zenity_warning
        fi
    elif [ "$path_project_folder" = "$button_text" ]
    then
        set_project_folder
    else
        run=0
    fi
fi
}


set_fingerprint()
{
zenity_text="$(gettext 'Please open terminal (Ctrl+Alt+T) and type:
gpg --fingerprint
Copy the key fingerprint (long alphanumeric code)
which you want to use and paste it here without spaces.')"

if fingerprint=$(zenity --entry \
                        --title="$title" \
                        --text="$zenity_text" \
                        --entry-text="$(cat $fingerprint_config_file)" \
                          $zenity_settings )

then
    echo $fingerprint > $fingerprint_config_file || create_fingerprint_config_file
fi
}


create_fingerprint_config_file()
{
mkdir $HOME/.config/deb-cup
echo $fingerprint > $fingerprint_config_file
}


set_usr_ppa()
{
zenity_text="$(gettext 'Please set user name and name of your PPA in format:
 user/ppa')"

if user_ppa=$(zenity --entry \
                     --title="$title" \
                     --text="$zenity_text" \
                     --entry-text="$(cat $usr_ppa_config_file)" \
                       $zenity_settings )
then
    echo $user_ppa > $usr_ppa_config_file || create_usr_ppa_config_file
fi
}


create_usr_ppa_config_file()
{
mkdir $HOME/.config/deb-cup
echo $user_ppa > $usr_ppa_config_file
}


set_project_folder()
{
set_path_parent_folder
if path_project_folder=$(zenity --file-selection \
                                --directory \
                                --title="$(gettext 'Choose a folder with the source code')" \
                                --filename="$path_parent_folder/" \
                                --window-icon=$icon )
then
    get_project_details
    # Needed for sorting [A-Za-z]
    export LC_COLLATE=C
    # A-Z not allowed
    if [[ $project_name_version =~ ^[a-z0-9\.-]*"-"[0-9\.]*$ ]]
    then
        echo $path_project_folder >> $path_config_file || create_path_config_file
        echo $path_parent_folder > $parent_folder_config_file
    else
        zenity_text="$(gettext 'Please set name and version of the folder in format
name-version, e.g. myapp-0.1.0.')"
        zenity_warning
    fi
    # Default Sorting [Aa-Zz]
    export LC_COLLATE=""
fi
}


create_path_config_file()
{
mkdir $HOME/.config/deb-cup
echo $path_project_folder > $path_config_file
}


set_path_parent_folder()
{
if ! path_parent_folder=$(cat $parent_folder_config_file)
then
    path_parent_folder=$HOME
fi
}


create_cfg()
{
mkdir $HOME/.config/deb-cup
echo "" > $config_file
}


#	ACTIONS
##############################################################################

create_debian_folder()
{
base_test
if [[ $base_test_result = "OK" ]]
then
    if ls $path_project_folder/debian/
    then
        xdg-open $path_project_folder/debian/
    else
        cd $path_project_folder
        dh_make --yes --indep --createorig
        touch debian/install
        if zenity --info \
                  --title="$title" \
                  --ok-label="$(gettext 'Open debian folder')" \
                  --text="$(gettext 'Please edit the files in the debian folder now.')" \
                    $zenity_settings
        then
            xdg-open $path_project_folder/debian/
        fi
    fi
fi
}


create_orig_tarball()
{
base_test
if [[ $base_test_result = "OK" ]]
then
    (
    echo "0"
    cd $path_parent_folder
    echo "5"
    tar -cf debian.tar $project_name_version/debian/
    echo "25"
    rm -fr $project_name_version/debian
    echo "45"
    tar -caf $project_name\_$project_version.orig.tar.xz $project_name_version
    echo "75"
    tar -xf debian.tar
    echo "90"
    rm debian.tar
    echo "100"
    ) | zenity --progress \
               --title="$title" \
               --auto-close \
               --no-cancel \
               --text="$(gettext 'Creating orig tarball...')" \
                 $zenity_settings

    notify-send "$(gettext 'Orig tarball created.')" --icon=$icon --expire-time=3000
fi
}


update_changelog()
{
base_test
if [[ $base_test_result = OK ]]
then
    if ls $path_project_folder/debian/changelog
    then
        check_name
        if [[ $folder_changelog_name = same ]]
        then
            check_version
            if [[ $folder_changelog_version = same ]]
            then
                cd $path_project_folder/debian
                dch --controlmaint 2> $log_file
                error_message=$(cat "$log_file")
                echo $error_message | grep --quiet "dch warning" && error="warning"
                echo $error_message | grep --quiet "../$project_name-" && error="renamed"
                case $error in
                    warning )
                        zenity_text="$error_message"
                        zenity_warning ;;
                    renamed )
                        project_version=$(echo "$error_message" |
                                          grep "../$project_name-" |
                                          sed 's/.*-//g' )
                        path_project_folder=$path_parent_folder/$project_name-$project_version
                        echo $path_project_folder >> $path_config_file
                        notify-send "$(gettext 'The project folder was renumbered to') $project_name-$project_version." --icon=$icon --expire-time=3000 ;;
                esac
                error=""
            else
                repair_version
            fi
        else
            repair_name
        fi
    else
        warning_create_debian_folder
    fi
fi
}


create_deb_binary()
{
base_test
if [[ $base_test_result = OK ]]
then
    ctvn_test
    if [[ $ctvn_test_result = OK ]]
    then
        cd $path_project_folder/debian
        dch --release --controlmaint
        cd $path_project_folder
        (
        echo "0"
        yes | debuild -us -uc -tc > $log_file
        echo "100"
        ) | zenity --progress \
                   --title="$title" \
                   --pulsate \
                   --auto-close \
                   --no-cancel \
                   --text="$(gettext 'Creating deb binary package...')" \
                     $zenity_settings

        zenity --text-info \
               --title="$title" \
               --window-icon=$icon \
               --width=520 \
               --height=330 \
               --filename=$log_file
    fi
fi
}


sign_packages()
{
base_test
if [[ $base_test_result = OK ]]
then
    ctvn_test
    if [[ $ctvn_test_result = OK ]]
    then
        cd $path_project_folder/debian
        dch --release --controlmaint
        fingerprint=$(cat $fingerprint_config_file)
        if [ $fingerprint =  ]
        then
            sec_key="$(eval gpg --list-secret-keys)"
            if [ $release = xenial ]
            then
                sec_key=$(echo "$sec_key" | sed -n '/sec /p' | sed 's/.*\/\(.*\) .*/\1/')
            else
                sec_key=$(echo $sec_key | sed 's/.* \(.*\) uid.*/\1/')
            fi
        else
            sec_key=$fingerprint
        fi
        cd $path_project_folder
        text_no="$(gettext 'No')"
        zenity_text="$(gettext 'Do you want to include orig tarball?')"
        sasd=""
        answer=""
        if answer=$(zenity --question \
                           --title="$title" \
                           --extra-button=$text_no \
                           --cancel-label="$(gettext 'Cancel')" \
                           --text="$zenity_text" \
                             $zenity_settings )
        then
            sasd="-sa"
        elif [ "$answer" = "$text_no" ]
        then
            sasd="-sd"
        fi
        if [ "$sasd" != "" ]
        then
            if [ "$release" = "xenial" ]
            then
                command="debuild -S $sasd -k$sec_key"
                gnome-terminal -e "bash -c \"$command; exec bash\""
            else
                (
                echo "0"
                yes | debuild -S $sasd -k$sec_key >  $log_file
                echo "100"
                ) | zenity --progress \
                           --title="$title" \
                           --pulsate \
                           --auto-close \
                           --no-cancel \
                           --text="$(gettext 'Creating signed dsc and changes...')" \
                             $zenity_settings
                sign_packages_info
            fi
        fi
    fi
fi
}


upload_file()
{
# Check whether an user and a ppa is set
user_ppa="$(cat $usr_ppa_config_file)"
if [ "$user_ppa" = "" ]
then
    zenity_text="$(gettext 'Please set the user and the ppa first.')"
    zenity_warning
else
    # Choose source.changes file
    set_path_parent_folder
    if path_changes_file=$(zenity --file-selection \
                                  --title="$(gettext 'Choose source.changes file')" \
                                  --window-icon=$icon \
                                  --filename="$path_parent_folder/" \
                                  --file-filter="source.changes | *source.changes")
    then
        # Print the part of string after last "/"
        file_name=$(echo "${path_changes_file##*/}")
        zenity_text="$(eval_gettext "Do you want to upload
\$file_name
to \$user_ppa?")"

        if zenity --question \
                  --title="$title" \
                  --default-cancel \
                  --text="$zenity_text" \
                    $zenity_settings

        then
            # Upload changes and the source code to the PPA
            (
            echo "0"
            dput ppa:$user_ppa $path_changes_file > $log_file
            echo "100"
            ) | zenity --progress \
                       --title="$title" \
                       --pulsate \
                       --auto-close \
                       --no-cancel \
                       --text="$(gettext 'Uploading files to the PPA...')" \
                         $zenity_settings

            log=$(cat $log_file)
            zenity --info \
                   --title="$title" \
                   --window-icon=$icon \
                   --width=520 \
                   --height=330 \
                   --text="$log"
        fi
    fi
fi
}


open_help()
{
# Read compressed text file.
zmore /usr/share/doc/deb-cup/help >$log_file
zenity --text-info \
       --title="$title - $(gettext Help)" \
       --window-icon=$icon \
       --width=665 \
       --height=500 \
       --html \
       --filename="$log_file"
}


open_about()
{
zenity_text="<b>$title</b>

$version

$(gettext 'GUI tool for creating deb packages and uploading them to a PPA.')

$(gettext 'Homepage'): https://github.com/pavreh/deb-cup"

zenity --info \
       --title="$(gettext 'About') $title" \
       --text="$zenity_text" \
         $zenity_settings
}


#	INFO
##############################################################################

sign_packages_info()
{
zenity --text-info \
       --title="$title" \
       --window-icon=$icon \
       --width=520 \
       --height=330 \
       --filename=$log_file

check_release
if [ $changelog_release = UNRELEASED ]
then
    zenity_text="$(gettext 'The dsc and changes files was not signed because a release in the changelog file is UNRELEASED. If you want signed dsc and changes please save the changelog file, which was automatically opened, before closing.')"
    zenity_warning
fi
}


#	CHECK
##############################################################################

get_project_details()
{
path_parent_folder=$(echo "${path_project_folder%/*}")
project_name_version=$(echo "${path_project_folder##*/}")
project_name=$(echo "${project_name_version%-*}")
project_version=$(echo "${path_project_folder##*-}")
}


check_name()
{
changelog_name=$(head -1 $path_project_folder/debian/changelog | sed 's/\(.*\) (.*/\1/')
if [ $changelog_name = $project_name ]
then
    folder_changelog_name="same"
else
    folder_changelog_name="different"
fi
}


check_version()
{
changelog_version=$(head -1 $path_project_folder/debian/changelog | sed 's/.*(\([0-9\.:]\+\).*/\1/g' |
                    sed 's/.*://g' )
if [ $changelog_version = $project_version ]
then
    folder_changelog_version="same"
else
    folder_changelog_version="different"
fi
}


check_release()
{
changelog_release=$(head -1 $path_project_folder/debian/changelog | sed 's/.*\(UNRELEASED\).*/\1/')
}


base_test()
{
base_test_result="OK"
get_project_details

# Check whether the folder name or version was not changed
if ! ls $path_project_folder
then
    base_test_result="FALSE"
    warning_set_project_folder
fi

# Check whether a project folder is set
if ! [[ $project_name_version = *"-"[0-9]* ]]
then
    base_test_result="FALSE"
    warning_set_project_folder
fi
}


ctvn_test()
{
ctvn_test_result="FALSE"
    # Check whether changelog file exist
    if ls $path_project_folder/debian/changelog
    then
        # Check whether orig tarball exist
        if ls $path_parent_folder/$project_name\_$project_version.orig.tar.*
        then
            # Check wheter the version of the project folder and the version
            # in the changelog file are the same
            check_version
            check_name
            if [[ $folder_changelog_version = same &&
                 $folder_changelog_name = same ]]
            then
                ctvn_test_result="OK"
            else
                warning_name_version_mishmash
            fi
        else
            warning_create_orig_tarball
        fi
    else
        warning_create_debian_folder
    fi
}


#	WARNINGS
##############################################################################

warning_set_project_folder()
{
zenity --warning --title="$title" $zenity_settings \
       --text="$(gettext 'Please choose a project folder first.')"
}


warning_create_debian_folder()
{
zenity --warning --title="$title" $zenity_settings \
       --text="$(gettext 'Please create a debian folder first.')"
}


warning_create_orig_tarball()
{
zenity --warning --title="$title" $zenity_settings \
       --text="$(gettext 'Please create the orig tarball first.')"
}


warning_name_version_mishmash()
{
zenity --warning --title="$title" $zenity_settings \
       --text="$(gettext 'Please increase changelog first.')"
}


zenity_warning()
{
zenity --warning --title="$title" --text="$zenity_text" $zenity_settings
}


#    TOOLS
##############################################################################

move_project_folder()
# used by repair_version and repair_name
{
if mv -T $path_project_folder $new_path_project_folder 2>$log_file
then
    echo $new_path_project_folder >> $path_config_file
    path_project_folder=$new_path_project_folder
    get_project_details
    notify-send "$notify_text" --icon=$icon --expire-time=3000
else
    zenity_text=$(cat $log_file)
    zenity_warning
fi
}

repair_name()
{
text_folder=$(gettext 'Rename')
zenity_text="$(gettext 'The name of the project folder and the name in the changelog file are not the same. Please rename the project folder or update the changelog.')

$(gettext 'Folder name'): $project_name
$(gettext 'Changelog name'): $changelog_name"

if answer=$(zenity --question \
                   --title="$title" \
                   --ok-label="$(gettext 'Open changelog')" \
                   --cancel-label="$(gettext 'Cancel')" \
                   --extra-button="$text_folder" \
                   --text="$zenity_text" \
                     $zenity_settings )
then
    cd $path_project_folder/debian
    dch --edit --check-dirname-regex $project_name_version
fi

if [ $answer = $text_folder ]
then
    new_path_project_folder=$path_parent_folder/$changelog_name-$project_version
    notify_text="$(gettext 'The project folder was renamed to') $changelog_name-$project_version."
    # used by repair_version too
    move_project_folder
fi
}


repair_version()
{
text_renumber=$(gettext 'Renumber')
zenity_text="$(gettext 'The version of the project folder and the version in the changelog file are not the same. Please renumber the project folder or update the changelog.')

$(gettext 'Folder version'): $project_version
$(gettext 'Changelog version'): $changelog_version"

if answer=$(zenity --question \
                   --title="$title" \
                   --ok-label="$(gettext 'Open changelog')" \
                   --cancel-label="$(gettext 'Cancel')" \
                   --extra-button="$text_renumber" \
                   --text="$zenity_text" \
                     $zenity_settings )

then
    cd $path_project_folder/debian
    dch --controlmaint
fi

if [ $answer = $text_renumber ]
then
    new_path_project_folder=$path_parent_folder/$project_name-$changelog_version
    notify_text="$(gettext 'The project folder was renumbered to') $project_name-$changelog_version."
    # used by repair_name too
    move_project_folder
fi
}


##############################################################################
#    PROGRAM
##############################################################################


#    PARAMETERS
##############################################################################
while [ $# -gt 0 ]
do
    case "$1" in
        --version | -v )
            echo "deb-cup version $version"
            exit
            ;;

        --help | -h )
            echo "$title - GUI tool for creating deb packages and uploading to a PPA"
            echo " "
            echo "usage: deb-cup [option]"
            echo " "
            echo "options:"
            echo "  -h, --help                show this help"
            echo "  -v, --version             print version number"
            exit
            ;;
    esac
    shift
done


##############################################################################

choose_recent


##############################################################################

while [ "$run" = 1 ]
do

main_window

if [ "$action" = "tarball" ]
then
    create_orig_tarball

elif [ "$action" = "changelog" ]
then
    update_changelog

elif [ "$action" = "binary" ]
then
    create_deb_binary

elif [ "$action" = "sign" ]
then
    sign_packages

elif [ "$action" = "upload" ]
then
    upload_file

elif [ "$action" = "debian" ]
then
    create_debian_folder

elif [ "$action" = "usr_ppa" ]
then
    set_usr_ppa

elif [ "$action" = "path" ]
then
    set_project_folder

elif [ "$action" = "doc-help" ]
then
    open_help

elif [ "$action" = "about" ]
then
    open_about

elif [ "$action" = "fingerprint" ]
then
    set_fingerprint

else
    run=0
    # let last 10 projects
    recent="$(tail $path_config_file)"
    echo "$recent" | uniq > $path_config_file
fi

done
